<section class="challenge">

    <div class="modal__container">
        <div class="challenge__container" v-if="modals.challengeModal.active">
            <h1 class="modal__header" v-if="challenger">{{challenger}} hat dich herausgefordert!</h1>
            <span class="challenge__close-button">X</span>
            <div class="button-wrapper">
                <button class="button button--big button__accept"
                        v-on:click="accept($event)"
                        data-action="accepted">
                    Accept
                </button>

                <button class="button button--big button__decline"
                        v-on:click="decline($event)"
                        data-action="declined">
                    Decline
                </button>
            </div>
        </div>

        <div class="waiting__container" v-if="modals.waitingModal.active">
            <h1 class="modal__header">Waiting for your Enemy to React</h1>
            <div class="waiting__text">
                <span>{{modals.waitingModal.waitingMessage}}</span>
                <button v-on:click="gameStart" v-if="modals.waitingModal.waitingMessage">go</button>
                <div v-if="!modals.waitingModal.waitingMessage" class="waiting__spinner">
                    <div class="waiting__spinner--dot dot1"></div>
                    <div class="waiting__spinner--dot dot2"></div>
                    <div class="waiting__spinner--dot dot3"></div>
                </div>
            </div>
        </div>
    </div>

</section>



<script>
    var challengeModal = new Vue({
        el: 'section.challenge',
        data: {
            challenger: '',
            modals: {
                waitingModal: {
                    active: false,
                    waitingMessage: null
                },
                challengeModal: {
                    active: false
                }
            }
        },
        created: function () {
            this.connection = new signalR.HubConnection("/game/")
        },
        mounted: function () {
            var that = this;
            //that.connection.start();
            //open you got challenged Modal
            that.connection.on('Challenged', function (challenger) {
                that.challenger = challenger;
                debugger;
                that.modals.challengeModal.active = true;
                $('section.challenge').addClass('active');

            });
            //open waiting for enemy Modal
            that.connection.on('waiting', function () {
                that.modals.waitingModal.active = true;
                $('section.challenge').addClass('active');
            });

            // Enemy reacted to your challenge
            that.connection.on('Response', function (enemy, action) {
                that.modals.waitingModal.waitingMessage = enemy + " has " + action;
            });

            // Enemy reacted to your challenge
            that.connection.on('GoToGame', function (url) {
                window.location.href = url;
            });
        },
        methods: {
            closeModal: function () {
                var that = this;
                $('section.challenge').removeClass('active');

            },
            accept: function (event) {
                var that = this;
                var action = $(event.target).data().action;
                that.connection.invoke('ChallengeResponse', that.challenger, action);

            },
            decline: function (event) {
                var that = this;
                var action = $(event.target).data().action;
                that.connection.invoke('ChallengeResponse', that.challenger, action);

            },
            gameStart: function () {
                var that = this;
                that.connection.invoke('GameStart', that.connection.connection.connectionId);
            }
        }
    });
</script>